#!/usr/bin/env python3
"""
Filename: S1_createhotWordLexiconUnigram 
Author: Chng Eng Siong
Date: 31 July 2021
Last edited: 28 Aug 2021 (CES), 11:07pm

# This library supports the reading a unigram count file generated by ngram-count
# it assumes 2 fields, 1 left field == string, right field == count
# we will not assume anything else, and the string can be non-english words.
# we will remove ALL non-english entries, and resort.
"""

import os, sys, io
import logging
import json 
import argparse

sys.path.append('./local')
from   libWord import C_WordList, C_OneWord
from   libWordCount import C_WordSortedCountDict, C_WordUnSortedCountDict
import subprocess


logging.basicConfig(
    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s',
    datefmt='%H:%M:%S',
    level=logging.INFO)
log = logging.getLogger("{}".format(os.path.basename(sys.argv[0])))


def wordIsRomanChars(w):
    return w[0].upper() and all([ord(c) <128 or (ord(c) >= 65313 and ord(c) <= 65339) or (ord(c) >= 65345 and ord(c) <= 65371) for c in w])



def HWLG_fromMaster(config,opDir, unigram_master, hotwordRawList, opHotDecoderUnigram, opHotDecoderLexicon):
    
    log.info("{}".format('S1: HWLG_fromMaster: Creating HotWord Decoder LG from Master unigramcount'))
    select_SqrtUnigramCount     = config['HWLG_fromMaster']['select_SqrtUnigramCount']
    useTopN_MasterWord          = config['HWLG_fromMaster']['useTopN_MasterWord']
    threshold_N_forCountHotWord = config['HWLG_fromMaster']['threshold_N_forCountHotWord']
    # parameters to use:
    print(select_SqrtUnigramCount, useTopN_MasterWord,threshold_N_forCountHotWord)

    myMasterCount = C_WordSortedCountDict()
    myMasterCount.readUnigramCount( unigram_master,useTopN_MasterWord)   # reading topN entries
    foundTok = myMasterCount.dictSortedIdxToStr[threshold_N_forCountHotWord-1]
    foundCountThreshold = myMasterCount.dictStrToSortedCount[foundTok]
    opStr = "read unigramcount, Threshold for hotword "+ str(foundCountThreshold)
    log.info("{}".format(opStr))

  # Lets read the hot word first
    listWord = C_WordList()
    
    listWord.read_WordList(hotwordRawList,True)
    # we must use above class, as we need the label of the hotword in __Tanjong_Pagar_Way
    # we must pass it a flag to tell read_WordList if or if not hotWord
    myHotWordCount = C_WordUnSortedCountDict()
    for oneWordStr in listWord.listWordStr:
        oneWord = listWord.dictWStrToCWord[oneWordStr]
        countPron = 0
        for pronStr in oneWord.wordArrayPron:        
            if countPron == 0:
                myHotWordCount.addWordCount(oneWord.wordLabel, foundCountThreshold)
                countPron = countPron+1
            else:
                # This is for multiple pronunciation using #1, #2, .. etc
                myHotWordCount.addWordCount(oneWord.wordLabel+'#'+str(countPron), foundCountThreshold)
                countPron=countPron+1

    #inserting the hotword and label into the myHotWordCount
    opStr = "completed constructing myHotWordCount hotwords :"
    log.info("{}".format(opStr))
    
    listOfWordToAdd = ['<s>','</s>','<unk>','<noise>','<v-noise>']
    for oneWordStr in  listOfWordToAdd:
        myHotWordCount.addWordCount(oneWordStr , foundCountThreshold)


    if config['HWLG_fromMaster']['select_SqrtUnigramCount'] == 1:
        #sqrt root the count
        print('SQRT change in count')
        myMasterCount.SqrtRootCount()
        myHotWordCount.SqrtRootCount()


    if config['HWLG_fromMaster']['select_SqrtUnigramCount'] == 0:
        print('no change in count')
        pass


    # here we save the count files    
    myMasterCount.SaveFile(opHotDecoderUnigram,'w')
    myHotWordCount.SaveFile(opHotDecoderUnigram,'a')

    # here we save the lexicon
    list_englishWordsUnigram = sorted(set(myMasterCount.dictStrToSortedCount.keys()))
    listWord.add_WordList( list_englishWordsUnigram, False)  #MUST set second entry to False it is NOT a hotword
    listWord.write_WordLexicon(opHotDecoderLexicon)

    opStr = "completed creating hotwordDecoderUnigram.txt and hotwordDecoderLex.txt in "+opDir
    log.info("{}".format(opStr))



def HWLG_fromBPE():
    log.info("{}".format('Creating HotWord Decoder LG from BPEWord'))
    # We have NOT implemented this yet
    # die



# This function will create in OpDir/config_LG
# The lexicon and count for hotword decoder

def real_main(ipJsonFileName):        

   log.info("{}".format("S1_createhotWordLexiconUnigram.py: creating the hotword decoder's lexicon and LMcount from Master with settings"))
   with open(ipJsonFileName, mode="r") as j_object:
      config = json.load(j_object)
   # Lets check the required directories
   log.info("{}".format("model="+config['model_name']))

   exptInfo=config['ExptInfo']['HWLG']
   log.info("{}".format("creating the experiment using:"+exptInfo))

   exptDir=config['ExptInfo']['exptDir']
   inputDir=config['ExptInfo']['inputDir'].replace('$exptDir',exptDir)
   outputDir=config['ExptInfo']['outputDir'].replace('$exptDir',exptDir)
   dataLGDir=config['ExptInfo']['dataLGDir'].replace('$exptDir',exptDir)

   masterDir=config['MasterDecoder']['masterDir'] 
   unigram_master               = config['MasterDecoder']['unigram_master'].replace('$masterDir',masterDir)
   hotwordRawList               = config['ExptInfo']['ipHotWordList']

   opHotDecoderUnigram          =  dataLGDir+'/'+config['dataLGDir']['hwUnigram_txt']
   opHotDecoderUnigramArpa      =  dataLGDir+'/'+config['dataLGDir']['hwUnigram_arpa']
   opHotDecoderUnigramArpa_gzip =  dataLGDir+'/'+config['dataLGDir']['hwUnigram_arpa_gz']
   opHotDecoderLexicon          =  dataLGDir+'/'+config['dataLGDir']['hwLex']

   if (exptInfo == 'HWLG_fromMaster'):
        HWLG_fromMaster(config,exptDir, unigram_master, hotwordRawList, opHotDecoderUnigram,opHotDecoderLexicon)

   if (exptInfo == 'HWLG_fromBPE'):
        HWLG_fromBPE(config)


   ngram_cmd = config['KaldiDir']['SRILM_ROOT']+'/ngram-count'     

   result1 = subprocess.Popen([ngram_cmd, '-read', opHotDecoderUnigram ,'-lm',opHotDecoderUnigramArpa ])
   result1.wait()
   print(result1)

   opCmdStr = 'gzip -c '+opHotDecoderUnigramArpa+' > '+opHotDecoderUnigramArpa_gzip 
   print('execute:'+opCmdStr)
   os.system(opCmdStr)


def main():
    parse = argparse.ArgumentParser()
    parse.add_argument('--json', required=True,  help="json file to setup experiment")
    args = parse.parse_args()
    real_main(args.json)
    
if __name__ == "__main__":
    main()
